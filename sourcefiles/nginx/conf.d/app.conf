server {
    listen 80;
    # listen 443 ssl http2;
    server_tokens off;
    server_name example.com;

    # Add certificate and key to sourcefiles/nginx/cert and uncomment this.
    # ssl_certificate         /etc/nginx/cert/example.pem;
    # ssl_certificate_key     /etc/nginx/cert/example.key;

    rewrite ^/(.*) https://www.example.com/$1 permanent;
}
server {
    listen 80;
    # listen 443 ssl http2;
    server_tokens off;
    server_name www.example.com cdn.example.com;

    # Add certificate and key to sourcefiles/nginx/cert and uncomment this.
    # ssl_certificate         /etc/nginx/cert/example.pem;
    # ssl_certificate_key     /etc/nginx/cert/example.key;

    index index.html;
    error_log  /var/nginx-log/error.log;
    access_log /var/nginx-log/access.log main;
    root /var/wp;
 

    location / {
            index index.php index.html;
            # This is cool because no php is touched for static content.
            # include the "?$args" part so non-default permalinks doesn't break when using query string
            # try_files $uri $uri/ /index.php?$args;

        # if the requested file exists, return it immediately
        if (-f $request_filename) {
                break;
        }

        # all other requests go to WordPress
        if (!-e $request_filename) {
                rewrite . /index.php last;
        }            
    }


    location ~ /\.ht {
        deny all;
    }

    location = /favicon.ico { 
        log_not_found off; access_log off; 
    }

    location = /robots.txt { 
        log_not_found off; access_log off; allow all; 
    }

    location ~* \.(js|css|png|jpg|jpeg|gif|ico)$ {
        expires max;
        log_not_found off;
    }

    location ~ \.php$ {
        try_files $uri =404;        
        fastcgi_split_path_info ^(.+\.php)(.*)$;
        if (-e $request_filename) {
            fastcgi_pass   app;
        }
        fastcgi_index index.php;
        include fastcgi_params;
        fastcgi_param SCRIPT_FILENAME $document_root$fastcgi_script_name;
        fastcgi_param PATH_INFO $fastcgi_path_info;
        fastcgi_param  QUERY_STRING     $query_string;
        fastcgi_param  REQUEST_METHOD   $request_method;
        fastcgi_param  CONTENT_TYPE     $content_type;
        fastcgi_param  CONTENT_LENGTH   $content_length;
        fastcgi_intercept_errors        on;
        fastcgi_ignore_client_abort     on;
        fastcgi_read_timeout 180;                
    }      
}
upstream app {
    server php:9000 max_fails=5 fail_timeout=60s;
}